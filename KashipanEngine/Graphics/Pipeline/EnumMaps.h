#pragma once
#include <d3d12.h>
#include <unordered_map>
#include <string>

namespace KashipanEngine::Pipeline::EnumMaps {

const std::unordered_map<std::string, D3D12_ROOT_SIGNATURE_FLAGS> kRootSignatureFlagsMap = {
    { "D3D12_ROOT_SIGNATURE_FLAG_NONE",                                 D3D12_ROOT_SIGNATURE_FLAG_NONE },
    { "D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT",   D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS",       D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS",         D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS",       D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS",     D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS",        D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT",                  D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT },
    { "D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE",                 D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS",D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS",         D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS },
    { "D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED",    D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED },
    { "D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED",        D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED },
};

const std::unordered_map<std::string, D3D12_SHADER_VISIBILITY> kShaderVisibilityMap = {
    { "D3D12_SHADER_VISIBILITY_ALL",            D3D12_SHADER_VISIBILITY_ALL },
    { "D3D12_SHADER_VISIBILITY_VERTEX",         D3D12_SHADER_VISIBILITY_VERTEX },
    { "D3D12_SHADER_VISIBILITY_HULL",           D3D12_SHADER_VISIBILITY_HULL },
    { "D3D12_SHADER_VISIBILITY_DOMAIN",         D3D12_SHADER_VISIBILITY_DOMAIN },
    { "D3D12_SHADER_VISIBILITY_GEOMETRY",       D3D12_SHADER_VISIBILITY_GEOMETRY },
    { "D3D12_SHADER_VISIBILITY_PIXEL",          D3D12_SHADER_VISIBILITY_PIXEL },
    { "D3D12_SHADER_VISIBILITY_AMPLIFICATION",  D3D12_SHADER_VISIBILITY_AMPLIFICATION },
    { "D3D12_SHADER_VISIBILITY_MESH",           D3D12_SHADER_VISIBILITY_MESH }
};

const std::unordered_map<std::string, D3D12_DESCRIPTOR_RANGE_TYPE> kDescriptorRangeTypeMap = {
    { "D3D12_DESCRIPTOR_RANGE_TYPE_SRV",        D3D12_DESCRIPTOR_RANGE_TYPE_SRV },
    { "D3D12_DESCRIPTOR_RANGE_TYPE_UAV",        D3D12_DESCRIPTOR_RANGE_TYPE_UAV },
    { "D3D12_DESCRIPTOR_RANGE_TYPE_CBV",        D3D12_DESCRIPTOR_RANGE_TYPE_CBV },
    { "D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER",    D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER }
};

const std::unordered_map<std::string, D3D12_DESCRIPTOR_HEAP_TYPE> kDescriptorHeapTypeMap = {
    { "D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV", D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV },
    { "D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER",     D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER },
    { "D3D12_DESCRIPTOR_HEAP_TYPE_RTV",         D3D12_DESCRIPTOR_HEAP_TYPE_RTV },
    { "D3D12_DESCRIPTOR_HEAP_TYPE_DSV",         D3D12_DESCRIPTOR_HEAP_TYPE_DSV },
    { "D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES",   D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES }
};

const std::unordered_map<std::string, D3D12_ROOT_PARAMETER_TYPE> kRootParameterTypeMap = {
    { "D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE", D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE },
    { "D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS",  D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS },
    { "D3D12_ROOT_PARAMETER_TYPE_CBV",              D3D12_ROOT_PARAMETER_TYPE_CBV },
    { "D3D12_ROOT_PARAMETER_TYPE_SRV",              D3D12_ROOT_PARAMETER_TYPE_SRV },
    { "D3D12_ROOT_PARAMETER_TYPE_UAV",              D3D12_ROOT_PARAMETER_TYPE_UAV }
};

const std::unordered_map<std::string, D3D12_STATIC_BORDER_COLOR> kStaticBorderColorMap = {
    { "D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK",    D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK },
    { "D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK",         D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK },
    { "D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE",         D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE },
    { "D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT",    D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK_UINT },
    { "D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT",    D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE_UINT }
};

const std::unordered_map<std::string, D3D12_FILTER> kFilterMap = {
    { "D3D12_FILTER_MIN_MAG_MIP_POINT",                             D3D12_FILTER_MIN_MAG_MIP_POINT },
    { "D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR",                      D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT",                D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR",                      D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT",                      D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT },
    { "D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR",               D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT",                      D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MIN_MAG_MIP_LINEAR",                            D3D12_FILTER_MIN_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT",                 D3D12_FILTER_MIN_MAG_ANISOTROPIC_MIP_POINT },
    { "D3D12_FILTER_ANISOTROPIC",                                   D3D12_FILTER_ANISOTROPIC },
    { "D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT",                  D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT },
    { "D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR",           D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT",     D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR",           D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR },
    { "D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT",           D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT },
    { "D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR",    D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT",           D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR",                 D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR },
    { "D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT",      D3D12_FILTER_COMPARISON_MIN_MAG_ANISOTROPIC_MIP_POINT },
    { "D3D12_FILTER_COMPARISON_ANISOTROPIC",                        D3D12_FILTER_COMPARISON_ANISOTROPIC },
    { "D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT",                     D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT },
    { "D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR",              D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT",        D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR",              D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT",              D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT },
    { "D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR",       D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT",              D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR",                    D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT",         D3D12_FILTER_MINIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
    { "D3D12_FILTER_MINIMUM_ANISOTROPIC",                           D3D12_FILTER_MINIMUM_ANISOTROPIC },
    { "D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT",                     D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT },
    { "D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR",              D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT",        D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR",              D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT",              D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT },
    { "D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR",       D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR },
    { "D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT",              D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT },
    { "D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR",                    D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR },
    { "D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT",         D3D12_FILTER_MAXIMUM_MIN_MAG_ANISOTROPIC_MIP_POINT },
    { "D3D12_FILTER_MAXIMUM_ANISOTROPIC",                           D3D12_FILTER_MAXIMUM_ANISOTROPIC }
};

const std::unordered_map<std::string, D3D12_TEXTURE_ADDRESS_MODE> kTextureAddressModeMap = {
    { "D3D12_TEXTURE_ADDRESS_MODE_WRAP",        D3D12_TEXTURE_ADDRESS_MODE_WRAP },
    { "D3D12_TEXTURE_ADDRESS_MODE_MIRROR",      D3D12_TEXTURE_ADDRESS_MODE_MIRROR },
    { "D3D12_TEXTURE_ADDRESS_MODE_CLAMP",       D3D12_TEXTURE_ADDRESS_MODE_CLAMP },
    { "D3D12_TEXTURE_ADDRESS_MODE_BORDER",      D3D12_TEXTURE_ADDRESS_MODE_BORDER },
    { "D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE", D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE }
};

const std::unordered_map<std::string, D3D12_COMPARISON_FUNC> kComparisonFuncMap = {
    { "D3D12_COMPARISON_FUNC_NEVER",            D3D12_COMPARISON_FUNC_NEVER },
    { "D3D12_COMPARISON_FUNC_LESS",             D3D12_COMPARISON_FUNC_LESS },
    { "D3D12_COMPARISON_FUNC_EQUAL",            D3D12_COMPARISON_FUNC_EQUAL },
    { "D3D12_COMPARISON_FUNC_LESS_EQUAL",       D3D12_COMPARISON_FUNC_LESS_EQUAL },
    { "D3D12_COMPARISON_FUNC_GREATER",          D3D12_COMPARISON_FUNC_GREATER },
    { "D3D12_COMPARISON_FUNC_NOT_EQUAL",        D3D12_COMPARISON_FUNC_NOT_EQUAL },
    { "D3D12_COMPARISON_FUNC_GREATER_EQUAL",    D3D12_COMPARISON_FUNC_GREATER_EQUAL },
    { "D3D12_COMPARISON_FUNC_ALWAYS",           D3D12_COMPARISON_FUNC_ALWAYS }
};

const std::unordered_map<std::string, D3D12_BLEND> kBlendMap = {
    { "D3D12_BLEND_ZERO",               D3D12_BLEND_ZERO },
    { "D3D12_BLEND_ONE",                D3D12_BLEND_ONE },
    { "D3D12_BLEND_SRC_COLOR",          D3D12_BLEND_SRC_COLOR },
    { "D3D12_BLEND_INV_SRC_COLOR",      D3D12_BLEND_INV_SRC_COLOR },
    { "D3D12_BLEND_SRC_ALPHA",          D3D12_BLEND_SRC_ALPHA },
    { "D3D12_BLEND_INV_SRC_ALPHA",      D3D12_BLEND_INV_SRC_ALPHA },
    { "D3D12_BLEND_DEST_ALPHA",         D3D12_BLEND_DEST_ALPHA },
    { "D3D12_BLEND_INV_DEST_ALPHA",     D3D12_BLEND_INV_DEST_ALPHA },
    { "D3D12_BLEND_DEST_COLOR",         D3D12_BLEND_DEST_COLOR },
    { "D3D12_BLEND_INV_DEST_COLOR",     D3D12_BLEND_INV_DEST_COLOR },
    { "D3D12_BLEND_SRC_ALPHA_SAT",      D3D12_BLEND_SRC_ALPHA_SAT },
    { "D3D12_BLEND_BLEND_FACTOR",       D3D12_BLEND_BLEND_FACTOR },
    { "D3D12_BLEND_INV_BLEND_FACTOR",   D3D12_BLEND_INV_BLEND_FACTOR },
    { "D3D12_BLEND_SRC1_COLOR",         D3D12_BLEND_SRC1_COLOR },
    { "D3D12_BLEND_INV_SRC1_COLOR",     D3D12_BLEND_INV_SRC1_COLOR },
    { "D3D12_BLEND_SRC1_ALPHA",         D3D12_BLEND_SRC1_ALPHA },
    { "D3D12_BLEND_INV_SRC1_ALPHA",     D3D12_BLEND_INV_SRC1_ALPHA },
    { "D3D12_BLEND_ALPHA_FACTOR",       D3D12_BLEND_ALPHA_FACTOR },
    { "D3D12_BLEND_INV_ALPHA_FACTOR",   D3D12_BLEND_INV_ALPHA_FACTOR }
};

const std::unordered_map<std::string, D3D12_LOGIC_OP> kLogicOpMap = {
    { "D3D12_LOGIC_OP_CLEAR",            D3D12_LOGIC_OP_CLEAR },
    { "D3D12_LOGIC_OP_SET",              D3D12_LOGIC_OP_SET },
    { "D3D12_LOGIC_OP_COPY",             D3D12_LOGIC_OP_COPY },
    { "D3D12_LOGIC_OP_COPY_INVERTED",    D3D12_LOGIC_OP_COPY_INVERTED },
    { "D3D12_LOGIC_OP_NOOP",             D3D12_LOGIC_OP_NOOP },
    { "D3D12_LOGIC_OP_INVERT",           D3D12_LOGIC_OP_INVERT },
    { "D3D12_LOGIC_OP_AND",              D3D12_LOGIC_OP_AND },
    { "D3D12_LOGIC_OP_NAND",             D3D12_LOGIC_OP_NAND },
    { "D3D12_LOGIC_OP_OR",               D3D12_LOGIC_OP_OR },
    { "D3D12_LOGIC_OP_NOR",              D3D12_LOGIC_OP_NOR },
    { "D3D12_LOGIC_OP_XOR",              D3D12_LOGIC_OP_XOR },
    { "D3D12_LOGIC_OP_EQUIV",            D3D12_LOGIC_OP_EQUIV },
    { "D3D12_LOGIC_OP_AND_REVERSE",      D3D12_LOGIC_OP_AND_REVERSE },
    { "D3D12_LOGIC_OP_AND_INVERTED",     D3D12_LOGIC_OP_AND_INVERTED },
    { "D3D12_LOGIC_OP_OR_REVERSE",       D3D12_LOGIC_OP_OR_REVERSE },
    { "D3D12_LOGIC_OP_OR_INVERTED",      D3D12_LOGIC_OP_OR_INVERTED }
};

const std::unordered_map<std::string, D3D12_BLEND_OP> kBlendOpMap = {
    { "D3D12_BLEND_OP_ADD",              D3D12_BLEND_OP_ADD },
    { "D3D12_BLEND_OP_SUBTRACT",         D3D12_BLEND_OP_SUBTRACT },
    { "D3D12_BLEND_OP_REV_SUBTRACT",     D3D12_BLEND_OP_REV_SUBTRACT },
    { "D3D12_BLEND_OP_MIN",              D3D12_BLEND_OP_MIN },
    { "D3D12_BLEND_OP_MAX",              D3D12_BLEND_OP_MAX }
};

const std::unordered_map<std::string, UINT8> kColorWriteEnableMap = {
    { "D3D12_COLOR_WRITE_ENABLE_RED",    static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_RED) },
    { "D3D12_COLOR_WRITE_ENABLE_GREEN",  static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_GREEN) },
    { "D3D12_COLOR_WRITE_ENABLE_BLUE",   static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_BLUE) },
    { "D3D12_COLOR_WRITE_ENABLE_ALPHA",  static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_ALPHA) },
    { "D3D12_COLOR_WRITE_ENABLE_RGB",    static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN | D3D12_COLOR_WRITE_ENABLE_BLUE) },
    { "D3D12_COLOR_WRITE_ENABLE_ALL",    static_cast<UINT8>(D3D12_COLOR_WRITE_ENABLE_ALL) }
};

const std::unordered_map<std::string, DXGI_FORMAT> kDxgiFormatMap = {
    { "DXGI_FORMAT_UNKNOWN",                    DXGI_FORMAT_UNKNOWN },
    { "DXGI_FORMAT_R32G32B32A32_TYPELESS",      DXGI_FORMAT_R32G32B32A32_TYPELESS },
    { "DXGI_FORMAT_R32G32B32A32_FLOAT",         DXGI_FORMAT_R32G32B32A32_FLOAT },
    { "DXGI_FORMAT_R32G32B32A32_UINT",          DXGI_FORMAT_R32G32B32A32_UINT },
    { "DXGI_FORMAT_R32G32B32A32_SINT",          DXGI_FORMAT_R32G32B32A32_SINT },
    { "DXGI_FORMAT_R32G32B32_TYPELESS",         DXGI_FORMAT_R32G32B32_TYPELESS },
    { "DXGI_FORMAT_R32G32B32_FLOAT",            DXGI_FORMAT_R32G32B32_FLOAT },
    { "DXGI_FORMAT_R32G32B32_UINT",             DXGI_FORMAT_R32G32B32_UINT },
    { "DXGI_FORMAT_R32G32B32_SINT",             DXGI_FORMAT_R32G32B32_SINT },
    { "DXGI_FORMAT_R16G16B16A16_TYPELESS",      DXGI_FORMAT_R16G16B16A16_TYPELESS },
    { "DXGI_FORMAT_R16G16B16A16_FLOAT",         DXGI_FORMAT_R16G16B16A16_FLOAT },
    { "DXGI_FORMAT_R16G16B16A16_UNORM",         DXGI_FORMAT_R16G16B16A16_UNORM },
    { "DXGI_FORMAT_R16G16B16A16_UINT",          DXGI_FORMAT_R16G16B16A16_UINT },
    { "DXGI_FORMAT_R16G16B16A16_SNORM",         DXGI_FORMAT_R16G16B16A16_SNORM },
    { "DXGI_FORMAT_R16G16B16A16_SINT",          DXGI_FORMAT_R16G16B16A16_SINT },
    { "DXGI_FORMAT_R32G32_TYPELESS",            DXGI_FORMAT_R32G32_TYPELESS },
    { "DXGI_FORMAT_R32G32_FLOAT",               DXGI_FORMAT_R32G32_FLOAT },
    { "DXGI_FORMAT_R32G32_UINT",                DXGI_FORMAT_R32G32_UINT },
    { "DXGI_FORMAT_R32G32_SINT",                DXGI_FORMAT_R32G32_SINT },
    { "DXGI_FORMAT_R32G8X24_TYPELESS",          DXGI_FORMAT_R32G8X24_TYPELESS },
    { "DXGI_FORMAT_D32_FLOAT_S8X24_UINT",       DXGI_FORMAT_D32_FLOAT_S8X24_UINT },
    { "DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS",   DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS },
    { "DXGI_FORMAT_X32_TYPELESS_G8X24_UINT",    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT },
    { "DXGI_FORMAT_R10G10B10A2_TYPELESS",       DXGI_FORMAT_R10G10B10A2_TYPELESS },
    { "DXGI_FORMAT_R10G10B10A2_UNORM",          DXGI_FORMAT_R10G10B10A2_UNORM },
    { "DXGI_FORMAT_R10G10B10A2_UINT",           DXGI_FORMAT_R10G10B10A2_UINT },
    { "DXGI_FORMAT_R11G11B10_FLOAT",            DXGI_FORMAT_R11G11B10_FLOAT },
    { "DXGI_FORMAT_R8G8B8A8_TYPELESS",          DXGI_FORMAT_R8G8B8A8_TYPELESS },
    { "DXGI_FORMAT_R8G8B8A8_UNORM",             DXGI_FORMAT_R8G8B8A8_UNORM },
    { "DXGI_FORMAT_R8G8B8A8_UNORM_SRGB",        DXGI_FORMAT_R8G8B8A8_UNORM_SRGB },
    { "DXGI_FORMAT_R8G8B8A8_UINT",              DXGI_FORMAT_R8G8B8A8_UINT },
    { "DXGI_FORMAT_R8G8B8A8_SNORM",             DXGI_FORMAT_R8G8B8A8_SNORM },
    { "DXGI_FORMAT_R8G8B8A8_SINT",              DXGI_FORMAT_R8G8B8A8_SINT },
    { "DXGI_FORMAT_R16G16_TYPELESS",            DXGI_FORMAT_R16G16_TYPELESS },
    { "DXGI_FORMAT_R16G16_FLOAT",               DXGI_FORMAT_R16G16_FLOAT },
    { "DXGI_FORMAT_R16G16_UNORM",               DXGI_FORMAT_R16G16_UNORM },
    { "DXGI_FORMAT_R16G16_UINT",                DXGI_FORMAT_R16G16_UINT },
    { "DXGI_FORMAT_R16G16_SNORM",               DXGI_FORMAT_R16G16_SNORM },
    { "DXGI_FORMAT_R16G16_SINT",                DXGI_FORMAT_R16G16_SINT },
    { "DXGI_FORMAT_R32_TYPELESS",               DXGI_FORMAT_R32_TYPELESS },
    { "DXGI_FORMAT_D32_FLOAT",                  DXGI_FORMAT_D32_FLOAT },
    { "DXGI_FORMAT_R32_FLOAT",                  DXGI_FORMAT_R32_FLOAT },
    { "DXGI_FORMAT_R32_UINT",                   DXGI_FORMAT_R32_UINT },
    { "DXGI_FORMAT_R32_SINT",                   DXGI_FORMAT_R32_SINT },
    { "DXGI_FORMAT_R24G8_TYPELESS",             DXGI_FORMAT_R24G8_TYPELESS },
    { "DXGI_FORMAT_D24_UNORM_S8_UINT",          DXGI_FORMAT_D24_UNORM_S8_UINT },
    { "DXGI_FORMAT_R24_UNORM_X8_TYPELESS",      DXGI_FORMAT_R24_UNORM_X8_TYPELESS },
    { "DXGI_FORMAT_X24_TYPELESS_G8_UINT",       DXGI_FORMAT_X24_TYPELESS_G8_UINT },
    { "DXGI_FORMAT_R8G8_TYPELESS",              DXGI_FORMAT_R8G8_TYPELESS },
    { "DXGI_FORMAT_R8G8_UNORM",                 DXGI_FORMAT_R8G8_UNORM },
    { "DXGI_FORMAT_R8G8_UINT",                  DXGI_FORMAT_R8G8_UINT },
    { "DXGI_FORMAT_R8G8_SNORM",                 DXGI_FORMAT_R8G8_SNORM },
    { "DXGI_FORMAT_R8G8_SINT",                  DXGI_FORMAT_R8G8_SINT },
    { "DXGI_FORMAT_R16_TYPELESS",               DXGI_FORMAT_R16_TYPELESS },
    { "DXGI_FORMAT_R16_FLOAT",                  DXGI_FORMAT_R16_FLOAT },
    { "DXGI_FORMAT_D16_UNORM",                  DXGI_FORMAT_D16_UNORM },
    { "DXGI_FORMAT_R16_UNORM",                  DXGI_FORMAT_R16_UNORM },
    { "DXGI_FORMAT_R16_UINT",                   DXGI_FORMAT_R16_UINT },
    { "DXGI_FORMAT_R16_SNORM",                  DXGI_FORMAT_R16_SNORM },
    { "DXGI_FORMAT_R16_SINT",                   DXGI_FORMAT_R16_SINT },
    { "DXGI_FORMAT_R8_TYPELESS",                DXGI_FORMAT_R8_TYPELESS },
    { "DXGI_FORMAT_R8_UNORM",                   DXGI_FORMAT_R8_UNORM },
    { "DXGI_FORMAT_R8_UINT",                    DXGI_FORMAT_R8_UINT },
    { "DXGI_FORMAT_R8_SNORM",                   DXGI_FORMAT_R8_SNORM },
    { "DXGI_FORMAT_R8_SINT",                    DXGI_FORMAT_R8_SINT },
    { "DXGI_FORMAT_A8_UNORM",                   DXGI_FORMAT_A8_UNORM },
    { "DXGI_FORMAT_R1_UNORM",                   DXGI_FORMAT_R1_UNORM },
    { "DXGI_FORMAT_R9G9B9E5_SHAREDEXP",         DXGI_FORMAT_R9G9B9E5_SHAREDEXP },
    { "DXGI_FORMAT_R8G8_B8G8_UNORM",            DXGI_FORMAT_R8G8_B8G8_UNORM },
    { "DXGI_FORMAT_G8R8_G8B8_UNORM",            DXGI_FORMAT_G8R8_G8B8_UNORM },
    { "DXGI_FORMAT_BC1_TYPELESS",               DXGI_FORMAT_BC1_TYPELESS },
    { "DXGI_FORMAT_BC1_UNORM",                  DXGI_FORMAT_BC1_UNORM },
    { "DXGI_FORMAT_BC1_UNORM_SRGB",             DXGI_FORMAT_BC1_UNORM_SRGB },
    { "DXGI_FORMAT_BC2_TYPELESS",               DXGI_FORMAT_BC2_TYPELESS },
    { "DXGI_FORMAT_BC2_UNORM",                  DXGI_FORMAT_BC2_UNORM },
    { "DXGI_FORMAT_BC2_UNORM_SRGB",             DXGI_FORMAT_BC2_UNORM_SRGB },
    { "DXGI_FORMAT_BC3_TYPELESS",               DXGI_FORMAT_BC3_TYPELESS },
    { "DXGI_FORMAT_BC3_UNORM",                  DXGI_FORMAT_BC3_UNORM },
    { "DXGI_FORMAT_BC3_UNORM_SRGB",             DXGI_FORMAT_BC3_UNORM_SRGB },
    { "DXGI_FORMAT_BC4_TYPELESS",               DXGI_FORMAT_BC4_TYPELESS },
    { "DXGI_FORMAT_BC4_UNORM",                  DXGI_FORMAT_BC4_UNORM },
    { "DXGI_FORMAT_BC4_SNORM",                  DXGI_FORMAT_BC4_SNORM },
    { "DXGI_FORMAT_BC5_TYPELESS",               DXGI_FORMAT_BC5_TYPELESS },
    { "DXGI_FORMAT_BC5_UNORM",                  DXGI_FORMAT_BC5_UNORM },
    { "DXGI_FORMAT_BC5_SNORM",                  DXGI_FORMAT_BC5_SNORM },
    { "DXGI_FORMAT_B5G6R5_UNORM",               DXGI_FORMAT_B5G6R5_UNORM },
    { "DXGI_FORMAT_B5G5R5A1_UNORM",             DXGI_FORMAT_B5G5R5A1_UNORM },
    { "DXGI_FORMAT_B8G8R8A8_UNORM",             DXGI_FORMAT_B8G8R8A8_UNORM },
    { "DXGI_FORMAT_B8G8R8X8_UNORM",             DXGI_FORMAT_B8G8R8X8_UNORM },
    { "DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM", DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM },
    { "DXGI_FORMAT_B8G8R8A8_TYPELESS",          DXGI_FORMAT_B8G8R8A8_TYPELESS },
    { "DXGI_FORMAT_B8G8R8A8_UNORM_SRGB",        DXGI_FORMAT_B8G8R8A8_UNORM_SRGB },
    { "DXGI_FORMAT_B8G8R8X8_TYPELESS",          DXGI_FORMAT_B8G8R8X8_TYPELESS },
    { "DXGI_FORMAT_B8G8R8X8_UNORM_SRGB",        DXGI_FORMAT_B8G8R8X8_UNORM_SRGB },
    { "DXGI_FORMAT_BC6H_TYPELESS",              DXGI_FORMAT_BC6H_TYPELESS },
    { "DXGI_FORMAT_BC6H_UF16",                  DXGI_FORMAT_BC6H_UF16 },
    { "DXGI_FORMAT_BC6H_SF16",                  DXGI_FORMAT_BC6H_SF16 },
    { "DXGI_FORMAT_BC7_TYPELESS",               DXGI_FORMAT_BC7_TYPELESS },
    { "DXGI_FORMAT_BC7_UNORM",                  DXGI_FORMAT_BC7_UNORM },
    { "DXGI_FORMAT_BC7_UNORM_SRGB",             DXGI_FORMAT_BC7_UNORM_SRGB },
    { "DXGI_FORMAT_AYUV",                       DXGI_FORMAT_AYUV },
    { "DXGI_FORMAT_Y410",                       DXGI_FORMAT_Y410 },
    { "DXGI_FORMAT_Y416",                       DXGI_FORMAT_Y416 },
    { "DXGI_FORMAT_NV12",                       DXGI_FORMAT_NV12 },
    { "DXGI_FORMAT_P010",                       DXGI_FORMAT_P010 },
    { "DXGI_FORMAT_P016",                       DXGI_FORMAT_P016 },
    { "DXGI_FORMAT_420_OPAQUE",                 DXGI_FORMAT_420_OPAQUE },
    { "DXGI_FORMAT_YUY2",                       DXGI_FORMAT_YUY2 },
    { "DXGI_FORMAT_Y210",                       DXGI_FORMAT_Y210 },
    { "DXGI_FORMAT_Y216",                       DXGI_FORMAT_Y216 },
    { "DXGI_FORMAT_NV11",                       DXGI_FORMAT_NV11 },
    { "DXGI_FORMAT_AI44",                       DXGI_FORMAT_AI44 },
    { "DXGI_FORMAT_IA44",                       DXGI_FORMAT_IA44 },
    { "DXGI_FORMAT_P8",                         DXGI_FORMAT_P8 },
    { "DXGI_FORMAT_A8P8",                       DXGI_FORMAT_A8P8 },
    { "DXGI_FORMAT_B4G4R4A4_UNORM",             DXGI_FORMAT_B4G4R4A4_UNORM },
    { "DXGI_FORMAT_P208",                       DXGI_FORMAT_P208 },
    { "DXGI_FORMAT_V208",                       DXGI_FORMAT_V208 },
    { "DXGI_FORMAT_V408",                       DXGI_FORMAT_V408 },
    { "DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE",            DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE },
    { "DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE",    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE },
    { "DXGI_FORMAT_A4B4G4R4_UNORM",             DXGI_FORMAT_A4B4G4R4_UNORM },
    { "DXGI_FORMAT_FORCE_UINT",                 DXGI_FORMAT_FORCE_UINT }
};

const std::unordered_map<std::string, D3D12_FILL_MODE> kFillModeMap = {
    { "D3D12_FILL_MODE_WIREFRAME", D3D12_FILL_MODE_WIREFRAME },
    { "D3D12_FILL_MODE_SOLID",     D3D12_FILL_MODE_SOLID }
};

const std::unordered_map<std::string, D3D12_CULL_MODE> kCullModeMap = {
    { "D3D12_CULL_MODE_NONE",      D3D12_CULL_MODE_NONE },
    { "D3D12_CULL_MODE_FRONT",     D3D12_CULL_MODE_FRONT },
    { "D3D12_CULL_MODE_BACK",      D3D12_CULL_MODE_BACK }
};

const std::unordered_map<std::string, D3D12_PRIMITIVE_TOPOLOGY_TYPE> kPrimitiveTopologyTypeMap = {
    { "D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED",    D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED },
    { "D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT",        D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT },
    { "D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE",         D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE },
    { "D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE",     D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE },
    { "D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH",        D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH }
};

const std::unordered_map<std::string, D3D12_CONSERVATIVE_RASTERIZATION_MODE> kConservativeRasterizationModeMap = {
    { "D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF",  D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF },
    { "D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON",   D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON }
};

const std::unordered_map<std::string, D3D12_MESH_SHADER_TIER> kMeshShaderTierMap = {
    { "D3D12_MESH_SHADER_TIER_NOT_SUPPORTED",       D3D12_MESH_SHADER_TIER_NOT_SUPPORTED },
    { "D3D12_MESH_SHADER_TIER_1",                   D3D12_MESH_SHADER_TIER_1 }
};

const std::unordered_map<std::string, D3D12_DEPTH_WRITE_MASK> kDepthWriteMaskMap = {
    { "D3D12_DEPTH_WRITE_MASK_ZERO",    D3D12_DEPTH_WRITE_MASK_ZERO },
    { "D3D12_DEPTH_WRITE_MASK_ALL",     D3D12_DEPTH_WRITE_MASK_ALL }
};

const std::unordered_map<std::string, D3D12_STENCIL_OP> kStencilOpMap = {
    { "D3D12_STENCIL_OP_KEEP",      D3D12_STENCIL_OP_KEEP },
    { "D3D12_STENCIL_OP_ZERO",      D3D12_STENCIL_OP_ZERO },
    { "D3D12_STENCIL_OP_REPLACE",   D3D12_STENCIL_OP_REPLACE },
    { "D3D12_STENCIL_OP_INCR_SAT",  D3D12_STENCIL_OP_INCR_SAT },
    { "D3D12_STENCIL_OP_DECR_SAT",  D3D12_STENCIL_OP_DECR_SAT },
    { "D3D12_STENCIL_OP_INVERT",    D3D12_STENCIL_OP_INVERT },
    { "D3D12_STENCIL_OP_INCR",      D3D12_STENCIL_OP_INCR },
    { "D3D12_STENCIL_OP_DECR",      D3D12_STENCIL_OP_DECR }
};

const std::unordered_map<std::string, D3D12_QUERY_TYPE> kQueryTypeMap = {
    { "D3D12_QUERY_TYPE_OCCLUSION",             D3D12_QUERY_TYPE_OCCLUSION },
    { "D3D12_QUERY_TYPE_BINARY_OCCLUSION",      D3D12_QUERY_TYPE_BINARY_OCCLUSION },
    { "D3D12_QUERY_TYPE_TIMESTAMP",             D3D12_QUERY_TYPE_TIMESTAMP },
    { "D3D12_QUERY_TYPE_PIPELINE_STATISTICS",   D3D12_QUERY_TYPE_PIPELINE_STATISTICS },
    { "D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0", D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 },
    { "D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1", D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 },
    { "D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2", D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 },
    { "D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3", D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 }
};

const std::unordered_map<std::string, D3D12_QUERY_HEAP_TYPE> kQueryHeapTypeMap = {
    { "D3D12_QUERY_HEAP_TYPE_OCCLUSION",                D3D12_QUERY_HEAP_TYPE_OCCLUSION },
    { "D3D12_QUERY_HEAP_TYPE_TIMESTAMP",                D3D12_QUERY_HEAP_TYPE_TIMESTAMP },
    { "D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS",      D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS },
    { "D3D12_QUERY_HEAP_TYPE_SO_STATISTICS",            D3D12_QUERY_HEAP_TYPE_SO_STATISTICS },
    { "D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS",  D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS },
    { "D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP",     D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP },
    { "D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1",     D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS1 }
};

const std::unordered_map<std::string, D3D12_INDEX_BUFFER_STRIP_CUT_VALUE> kIndexBufferStripCutValueMap = {
    { "D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED",    D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED },
    { "D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF",      D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF },
    { "D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF",  D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF }
};

const std::unordered_map<std::string, D3D12_PIPELINE_STATE_FLAGS> kPipelineStateFlagsMap = {
    { "D3D12_PIPELINE_STATE_FLAG_NONE",                             D3D12_PIPELINE_STATE_FLAG_NONE },
    { "D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG",                       D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG },
    { "D3D12_PIPELINE_STATE_FLAG_DYNAMIC_DEPTH_BIAS",               D3D12_PIPELINE_STATE_FLAG_DYNAMIC_DEPTH_BIAS },
    { "D3D12_PIPELINE_STATE_FLAG_DYNAMIC_INDEX_BUFFER_STRIP_CUT",   D3D12_PIPELINE_STATE_FLAG_DYNAMIC_INDEX_BUFFER_STRIP_CUT }
};

const std::unordered_map<std::string, D3D12_INPUT_CLASSIFICATION> kInputClassificationMap = {
    { "D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA",     D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA },
    { "D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA",   D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA }
};

} // namespace KashipanEngine:Pipeline::EnumMaps